================================================================================
    exam （驾校综合信息管理系统）
================================================================================
架构说明：
	架构采用，SpringMVC4.3 + MyBatis3.4 + Sitemesh2.4 + Shiro1.3
	日志：slf4j + log4j
项目说明：
		
================================================================================
开发说明：
	代码：
	    com.project.exam.* 子包说明：
		a) common 通用基础类，如系统配置信息类，拦截器等
		b) controller ,与其名称一致主要存放Controller类
		c) dao 数据库Mapper类
		d) model 表映射java对象
		e) service 服务类
		f) xml mybatis 表映射xml文件

		com.project.bean.* 存放全局的Bean对象
		
		com.project.utils.* 存放全局工具类
================================================================================
日志规范：
		fatal - 严重的，造成服务中断的错误；
		error - 其他错误运行期错误；
		warn - 警告信息，如程序调用了一个即将作废的接口，接口的不当使用，运行状态不是期望的但仍可继续处理等；
		info - 有意义的事件信息，如程序启动，关闭事件，收到请求事件等；
		debug - 调试信息，可记录详细的业务处理到哪一步了，以及当前的变量状态；
		trace - 更详细的跟踪信息；
	日志记录采用slf4j 接口
	要求：
		1) 一个对象中通常只使用一个Logger对象，Logger应该是static final的, 示例：static final Logger log = LoggerFactory.getLogger(ModuleManagerController.class);
		2) 方法日志要求进入方法的时候有一个info级别的日志说明 格式为 “[方法名] 简单说明” 示例： log.info("[loginpage] login page ... ");
		3) try catch 中的异常要求error级别的日志记录，格式与上面的一致，根据情况确定是否打印异常跟踪信息。
		4) 本项目开发默认使用info级别，调试查找错误使用debug级别，生产环境正式上线后根据情况使用info或error级别。
	  
================================================================================	
注释规范：
	1. 类注释：要求每个类都要有说明，对于比较复杂的类需要对功能进行一定的描述
	2. 方法注释：要求每个方法都要有注释说明，对于逻辑比较复杂的方法需要对方法实现功能逻辑以及处理结果说明。
	3. 代码注释：对于比较复杂的代码，需要对块，语句适当注释。
	原则：要求其他人可以通过注释明白代码的功能逻辑。
================================================================================	  

	1）数据库，库表名、字段名使用有
	采用26个英文字母(小写)和0-9这十个自然数,加上下划线'_'组成,共63个字符.不能出现其他字符(注释除外). 
	注意事项: 
	1) 以上命名都不得超过30个字符的系统限制.变量名的长度限制为29(不包括标识字符@). 
	2) 数据对象、变量的命名都采用英文字符,禁止使用中文命名,绝对不要在对象名的字符之间留空格. 
	3) 命名尽量采用有意义的英文单词，每个单词之间采用_分隔，非特别情况尽量少用拼音
	3) 小心保留词,要保证你的字段名没有和保留词、数据库系统或者常用访问方法冲突 
	5) 保持字段名和类型的一致性,在命名字段并为其指定数据类型的时候一定要保证一致性.假如数据类型在一个表里是整数,那在另一个表里可就别变成字符型了. 
	6) 库表前缀：系统表使用sys_ 普通表使用tb_ 字典表使用dt_
	
			
================================================================================	

